#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö HR Bot
–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–µ–π SQLAlchemy.
"""

import os
import sys
import logging
from sqlalchemy import create_engine, text
from dotenv import load_dotenv

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ src, —á—Ç–æ–±—ã Python –º–æ–≥ –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –º–æ–¥—É–ª–∏
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def get_db_url():
    """–°–æ–±–∏—Ä–∞–µ—Ç URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    db_user = os.getenv('POSTGRES_USER')
    db_password = os.getenv('POSTGRES_PASSWORD')
    db_host = os.getenv('POSTGRES_HOST')
    db_port = os.getenv('POSTGRES_PORT')
    db_name = os.getenv('POSTGRES_DB')

    if not all([db_user, db_password, db_host, db_port, db_name]):
        logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

    return f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"


def init_db():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü.
    –û–Ω–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç Base –∏ –º–æ–¥–µ–ª–∏, –∞ –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ—Ç create_all.
    """
    try:
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢ BASE ---
        # –ü–æ—Å–∫–æ–ª—å–∫—É Base –≤ src/__init__.py, –º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ —Ç–∞–∫:
        from __init__ import Base

        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢ –ú–û–î–ï–õ–ï–ô ---
        # –ü–æ—Å–∫–æ–ª—å–∫—É –≤—Å–µ –º–æ–¥–µ–ª–∏ –ª–µ–∂–∞—Ç "–ø–ª–æ—Å–∫–æ" –≤ src, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –Ω–∞–ø—Ä—è–º—É—é.
        # –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã SQLAlchemy "—É–∑–Ω–∞–ª" –æ –Ω–∏—Ö –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º create_all.
        import user
        import job
        import subscription
        # ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã —Å –º–æ–¥–µ–ª—è–º–∏

        engine = create_engine(get_db_url())

        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        with engine.connect() as connection:
            version_result = connection.execute(text("SELECT version()"))
            logger.info(f"–í–µ—Ä—Å–∏—è PostgreSQL: {version_result.scalar_one()}")

        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–µ–π SQLAlchemy...")
        # –≠—Ç–æ –≥–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –û–Ω–∞ —Å–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã, –æ –∫–æ—Ç–æ—Ä—ã—Ö "–∑–Ω–∞–µ—Ç" Base.
        Base.metadata.create_all(bind=engine)

        logger.info("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        return True

    except ImportError as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–æ–¥–µ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏. –û—à–∏–±–∫–∞: {e}", exc_info=True)
        return False
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö HR Bot (–Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–µ–π SQLAlchemy)")
    print("=" * 60)
    
    if init_db():
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        sys.exit(1)


if __name__ == "__main__":
    main()
