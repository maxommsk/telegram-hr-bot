#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
"""

import os
import sys
import logging
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É src –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

load_dotenv()

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def initialize_database():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏–∑ core.py
        logger.info("–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º app –∏ db –Ω–∞–ø—Ä—è–º—É—é –∏–∑ core...")
        from core import app, db
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏
        logger.info("–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏...")
        import user
        import application  
        import job
        import subscription
        
        with app.app_context():
            logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏...")
            
            # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            tables = list(db.metadata.tables.keys())
            logger.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏/—Ç–∞–±–ª–∏—Ü—ã: {tables}")
            
            if not tables:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏!")
                logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã...")
                logger.info(f"user –º–æ–¥—É–ª—å: {dir(user)}")
                logger.info(f"application –º–æ–¥—É–ª—å: {dir(application)}")
                logger.info(f"job –º–æ–¥—É–ª—å: {dir(job)}")
                logger.info(f"subscription –º–æ–¥—É–ª—å: {dir(subscription)}")
                
                # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –∫–ª–∞—Å—Å—ã –º–æ–¥–µ–ª–µ–π
                logger.info("–ò—â–µ–º –∫–ª–∞—Å—Å—ã –º–æ–¥–µ–ª–µ–π –≤ –º–æ–¥—É–ª—è—Ö...")
                for module_name, module in [('user', user), ('application', application), ('job', job), ('subscription', subscription)]:
                    for attr_name in dir(module):
                        attr = getattr(module, attr_name)
                        if hasattr(attr, '__tablename__'):
                            logger.info(f"–ù–∞–π–¥–µ–Ω –∫–ª–∞—Å—Å –º–æ–¥–µ–ª–∏: {module_name}.{attr_name} -> —Ç–∞–±–ª–∏—Ü–∞ '{attr.__tablename__}'")
            
            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...")
            db.create_all()
            logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ db.create_all() –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª–æ—Å—å
            logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ...")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º text() –¥–ª—è SQL-–∑–∞–ø—Ä–æ—Å–∞
            from sqlalchemy import text
            result = db.session.execute(text("SELECT tablename FROM pg_tables WHERE schemaname = 'public'"))
            actual_tables = [row[0] for row in result.fetchall()]
            logger.info(f"–†–µ–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ: {actual_tables}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            required_tables = ['users', 'jobs', 'subscriptions', 'applications']
            found_tables = []
            missing_tables = []
            
            for table in required_tables:
                if table in actual_tables:
                    found_tables.append(table)
                    logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{table}' –Ω–∞–π–¥–µ–Ω–∞")
                else:
                    missing_tables.append(table)
                    logger.warning(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü:")
            logger.info(f"   –ù–∞–π–¥–µ–Ω–æ: {len(found_tables)} –∏–∑ {len(required_tables)}")
            logger.info(f"   –ù–∞–π–¥–µ–Ω–Ω—ã–µ: {found_tables}")
            if missing_tables:
                logger.warning(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ: {missing_tables}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL
            try:
                result = db.session.execute(text("SELECT version();"))
                version = result.fetchone()[0]
                logger.info(f"üêò PostgreSQL: {version.split(',')[0]}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é PostgreSQL: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü
            try:
                result = db.session.execute(text("SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public'"))
                total_tables = result.fetchone()[0]
                logger.info(f"üìã –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ public: {total_tables}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü: {e}")

    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ src/")
        logger.error("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å:")
        logger.error("  src/")
        logger.error("    core.py")
        logger.error("    user.py")
        logger.error("    job.py")
        logger.error("    application.py")
        logger.error("    subscription.py")
        sys.exit(1)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
        traceback.print_exc()
        sys.exit(1)

    logger.info("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = ['POSTGRES_USER', 'POSTGRES_PASSWORD', 'POSTGRES_HOST', 'POSTGRES_PORT', 'POSTGRES_DB']
    missing_vars = []
    
    for var in required_vars:
        value = os.getenv(var)
        if value:
            # –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –≤ –ª–æ–≥–∞—Ö
            display_value = "***" if "PASSWORD" in var else value
            logger.info(f"‚úÖ {var}: {display_value}")
        else:
            missing_vars.append(var)
            logger.error(f"‚ùå {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    if missing_vars:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {missing_vars}")
        return False
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö HR Bot")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not check_environment():
        logger.error("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤
    logger.info("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
    src_path = os.path.join(os.path.dirname(__file__), 'src')
    required_files = ['core.py', 'user.py', 'job.py', 'application.py', 'subscription.py']
    
    for file in required_files:
        file_path = os.path.join(src_path, file)
        if os.path.exists(file_path):
            logger.info(f"‚úÖ {file}")
        else:
            logger.warning(f"‚ùå {file} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    initialize_database()
    
    print("=" * 50)
    print("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("üéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!")

if __name__ == "__main__":
    main()
