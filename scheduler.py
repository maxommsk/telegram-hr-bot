import schedule
import time
import threading
import logging
from datetime import datetime, timedelta
from typing import List

from user import db
from job import Job
from subscription import Subscription

# –£–î–ê–õ–ï–ù–û: from main import bot - –±–æ–ª—å—à–µ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º bot –∏–∑ main

logger = logging.getLogger(__name__)

class NotificationScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö"""
    
    def __init__(self, bot_instance):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        
        Args:
            bot_instance: –≠–∫–∑–µ–º–ø–ª—è—Ä TelegramHRBot
        """
        self.bot = bot_instance
        self.app = bot_instance.app  # –ü–æ–ª—É—á–∞–µ–º Flask app –∏–∑ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
        self.running = False
        self.setup_schedule()
        
        logger.info("NotificationScheduler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def setup_schedule(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        schedule.every(5).minutes.do(self.send_immediate_notifications)
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ 9:00
        schedule.every().day.at("09:00").do(self.send_daily_notifications)
        
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –≤ 10:00
        schedule.every().monday.at("10:00").do(self.send_weekly_notifications)
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 2:00
        schedule.every().day.at("02:00").do(self.cleanup_old_data)
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.running = True
        
        def run_scheduler():
            while self.running:
                try:
                    schedule.run_pending()
                    time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                    time.sleep(60)
        
        scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
        scheduler_thread.start()
        
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.running = False
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def send_immediate_notifications(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        with self.app.app_context():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ —Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                subscriptions = Subscription.query.filter_by(
                    frequency='immediate',
                    is_active=True,
                    is_paused=False
                ).all()
                
                for subscription in subscriptions:
                    self.process_subscription(subscription)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    def send_daily_notifications(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        with self.app.app_context():
            try:
                subscriptions = Subscription.query.filter_by(
                    frequency='daily',
                    is_active=True,
                    is_paused=False
                ).all()
                
                for subscription in subscriptions:
                    if subscription.should_send_notification():
                        self.process_subscription(subscription)
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    def send_weekly_notifications(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        with self.app.app_context():
            try:
                subscriptions = Subscription.query.filter_by(
                    frequency='weekly',
                    is_active=True,
                    is_paused=False
                ).all()
                
                for subscription in subscriptions:
                    if subscription.should_send_notification():
                        self.process_subscription(subscription)
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    def process_subscription(self, subscription: Subscription):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
            criteria = subscription.get_criteria_dict()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞
            if subscription.frequency == 'immediate':
                since_date = subscription.last_notification_sent or (datetime.utcnow() - timedelta(hours=1))
            elif subscription.frequency == 'daily':
                since_date = datetime.utcnow() - timedelta(days=1)
            else:  # weekly
                since_date = datetime.utcnow() - timedelta(days=7)
            
            # –ò—â–µ–º –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
            jobs = self.find_matching_jobs(criteria, since_date, subscription)
            
            if jobs:
                self.send_notification_to_user(subscription, jobs)
                subscription.mark_notification_sent(len(jobs))
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.id}: {e}")
    
    def find_matching_jobs(self, criteria: dict, since_date: datetime, subscription: Subscription) -> List[Job]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤–∞–∫–∞–Ω—Å–∏–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        query = Job.query.filter(
            Job.is_active == True,
            Job.created_at >= since_date  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å published_at –Ω–∞ created_at
        )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        if 'keywords' in criteria:
            keywords = criteria['keywords']
            query = query.filter(
                db.or_(
                    Job.title.ilike(f'%{keywords}%'),
                    Job.description.ilike(f'%{keywords}%')
                )
            )
        
        if 'location' in criteria:
            location = criteria['location']
            query = query.filter(Job.location.ilike(f'%{location}%'))
        
        if 'company' in criteria:
            company = criteria['company']
            query = query.filter(Job.company.ilike(f'%{company}%'))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        if hasattr(subscription, 'min_salary') and subscription.min_salary:
            query = query.filter(Job.salary_min >= subscription.min_salary)
        
        if hasattr(subscription, 'only_remote') and subscription.only_remote:
            query = query.filter(Job.is_remote == True)
        
        if hasattr(subscription, 'only_featured') and subscription.only_featured:
            query = query.filter(Job.is_featured == True)
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ —á–µ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É –∫–æ–º–ø–∞–Ω–∏–π
        if hasattr(subscription, 'get_company_blacklist_list'):
            company_blacklist = subscription.get_company_blacklist_list()
            if company_blacklist:
                for company in company_blacklist:
                    query = query.filter(~Job.company.ilike(f'%{company}%'))
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if hasattr(subscription, 'get_exclude_keywords_list'):
            exclude_keywords = subscription.get_exclude_keywords_list()
            if exclude_keywords:
                for keyword in exclude_keywords:
                    query = query.filter(
                        ~db.and_(
                            Job.title.ilike(f'%{keyword}%'),
                            Job.description.ilike(f'%{keyword}%')
                        )
                    )
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        max_jobs = getattr(subscription, 'max_notifications_per_day', 10) or 10
        
        return query.order_by(Job.created_at.desc()).limit(max_jobs).all()
    
    def send_notification_to_user(self, subscription: Subscription, jobs: List[Job]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            user = subscription.user
            
            if len(jobs) == 1:
                # –û–¥–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è - –ø–æ–¥—Ä–æ–±–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                job = jobs[0]
                text = f"üîî <b>–ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ \"{subscription.name}\"</b>\n\n"
                text += f"üíº <b>{job.title}</b>\n"
                text += f"üè¢ {job.company}\n"
                text += f"üìç {job.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É
                if job.salary_min and job.salary_max:
                    text += f"üí∞ {job.salary_min:,} - {job.salary_max:,} —Ä—É–±.\n"
                elif job.salary_min:
                    text += f"üí∞ –æ—Ç {job.salary_min:,} —Ä—É–±.\n"
                elif job.salary_max:
                    text += f"üí∞ –¥–æ {job.salary_max:,} —Ä—É–±.\n"
                else:
                    text += f"üí∞ –ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏\n"
                
                # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                description = job.description[:150] + "..." if len(job.description) > 150 else job.description
                text += f"\nüìù {description}\n\n"
                text += f"üïí –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {job.created_at.strftime('%d.%m.%Y %H:%M')}"
                
                from telebot import types
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("üëÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"view_job_{job.id}"),
                    types.InlineKeyboardButton("üìù –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"apply_job_{job.id}")
                )
                markup.add(
                    types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"edit_subscription_{subscription.id}")
                )
                
            else:
                # –ù–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∫–∞–Ω—Å–∏–π - –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫
                text = f"üîî <b>–ù–∞–π–¥–µ–Ω–æ {len(jobs)} –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ \"{subscription.name}\"</b>\n\n"
                
                for i, job in enumerate(jobs[:5], 1):
                    salary_range = "–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"
                    if job.salary_min and job.salary_max:
                        salary_range = f"{job.salary_min:,} - {job.salary_max:,} —Ä—É–±."
                    elif job.salary_min:
                        salary_range = f"–æ—Ç {job.salary_min:,} —Ä—É–±."
                    elif job.salary_max:
                        salary_range = f"–¥–æ {job.salary_max:,} —Ä—É–±."
                    
                    text += f"{i}. <b>{job.title}</b> –≤ {job.company}\n"
                    text += f"   üìç {job.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} | üí∞ {salary_range}\n\n"
                
                if len(jobs) > 5:
                    text += f"... –∏ –µ—â–µ {len(jobs) - 5} –≤–∞–∫–∞–Ω—Å–∏–π\n\n"
                
                from telebot import types
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ", callback_data="all_jobs"),
                    types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search_jobs")
                )
                markup.add(
                    types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"edit_subscription_{subscription.id}")
                )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º self.bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            if self.bot and hasattr(self.bot, 'bot'):
                self.bot.bot.send_message(
                    user.telegram_id,
                    text,
                    parse_mode='HTML',
                    reply_markup=markup
                )
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id} –æ {len(jobs)} –≤–∞–∫–∞–Ω—Å–∏—è—Ö")
            else:
                logger.error("Bot instance –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {subscription.user_id}: {e}")
    
    def cleanup_old_data(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        with self.app.app_context():
            try:
                # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
                expired_date = datetime.utcnow()
                expired_subscriptions = Subscription.query.filter(
                    Subscription.expires_at < expired_date
                ).all()
                
                for subscription in expired_subscriptions:
                    if hasattr(subscription, 'deactivate'):
                        subscription.deactivate()
                    else:
                        subscription.is_active = False
                
                logger.info(f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {len(expired_subscriptions)} –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
                
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (—Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
                old_date = datetime.utcnow() - timedelta(days=90)
                old_jobs = Job.query.filter(
                    Job.is_active == True,
                    Job.created_at < old_date
                ).all()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤, –µ—Å–ª–∏ –ø–æ–ª–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                for job in old_jobs:
                    applications_count = 0
                    if hasattr(job, 'applications'):
                        applications_count = len(job.applications)
                    
                    if applications_count == 0:
                        job.is_active = False
                
                db.session.commit()
                logger.info(f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {len(old_jobs)} —Å—Ç–∞—Ä—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def send_test_notification(self, user_id: int, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            if self.bot and hasattr(self.bot, 'bot'):
                self.bot.bot.send_message(user_id, f"üß™ –¢–µ—Å—Ç: {message}")
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            else:
                logger.error("Bot instance –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def send_notification(self, telegram_id: int, message_text: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            if self.bot and hasattr(self.bot, 'bot'):
                self.bot.bot.send_message(telegram_id, message_text)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
            else:
                logger.error("Bot instance –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def schedule_job_notification(self, job_id: int):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏"""
        try:
            with self.app.app_context():
                job = Job.query.get(job_id)
                if not job:
                    logger.error(f"–í–∞–∫–∞–Ω—Å–∏—è —Å ID {job_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–µ–π
                subscriptions = Subscription.query.filter_by(
                    frequency='immediate',
                    is_active=True,
                    is_paused=False
                ).all()
                
                for subscription in subscriptions:
                    criteria = subscription.get_criteria_dict()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è –ø–æ–¥ –∫—Ä–∏—Ç–µ—Ä–∏–∏
                    if self.job_matches_criteria(job, criteria, subscription):
                        self.send_notification_to_user(subscription, [job])
                        subscription.mark_notification_sent(1)
                
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {job_id}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤–∞–∫–∞–Ω—Å–∏–∏ {job_id}: {e}")
    
    def job_matches_criteria(self, job: Job, criteria: dict, subscription: Subscription) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            if 'keywords' in criteria:
                keywords = criteria['keywords'].lower()
                if keywords not in job.title.lower() and keywords not in job.description.lower():
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            if 'location' in criteria:
                location = criteria['location'].lower()
                if job.location and location not in job.location.lower():
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é
            if 'company' in criteria:
                company = criteria['company'].lower()
                if company not in job.company.lower():
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É
            if hasattr(subscription, 'min_salary') and subscription.min_salary:
                if not job.salary_min or job.salary_min < subscription.min_salary:
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
            if hasattr(subscription, 'get_company_blacklist_list'):
                company_blacklist = subscription.get_company_blacklist_list()
                for blacklisted_company in company_blacklist:
                    if blacklisted_company.lower() in job.company.lower():
                        return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–∞—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            if hasattr(subscription, 'get_exclude_keywords_list'):
                exclude_keywords = subscription.get_exclude_keywords_list()
                for keyword in exclude_keywords:
                    if keyword.lower() in job.title.lower() or keyword.lower() in job.description.lower():
                        return False
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º: {e}")
            return False
    
    def get_statistics(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        with self.app.app_context():
            try:
                total_subscriptions = Subscription.query.count()
                active_subscriptions = Subscription.query.filter_by(
                    is_active=True,
                    is_paused=False
                ).count()
                
                immediate_subs = Subscription.query.filter_by(
                    frequency='immediate',
                    is_active=True,
                    is_paused=False
                ).count()
                
                daily_subs = Subscription.query.filter_by(
                    frequency='daily',
                    is_active=True,
                    is_paused=False
                ).count()
                
                weekly_subs = Subscription.query.filter_by(
                    frequency='weekly',
                    is_active=True,
                    is_paused=False
                ).count()
                
                return {
                    'total_subscriptions': total_subscriptions,
                    'active_subscriptions': active_subscriptions,
                    'immediate_subscriptions': immediate_subs,
                    'daily_subscriptions': daily_subs,
                    'weekly_subscriptions': weekly_subs,
                    'scheduler_running': self.running
                }
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                return {}
