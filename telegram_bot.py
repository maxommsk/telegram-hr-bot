import os
import sys
import json
import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, Any

import telebot
from telebot import types
from flask import Flask, request

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from src.models.user import User, db
from src.models.job import Job
from src.models.application import Application
from src.models.subscription import Subscription

logger = logging.getLogger(__name__)

class TelegramHRBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram HR Bot —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    
    def __init__(self, token: str, flask_app: Flask):
        self.bot = telebot.TeleBot(token)
        self.app = flask_app
        self.user_states = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.setup_handlers()
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        self.JOBS_PER_PAGE = 5
        self.APPLICATIONS_PER_PAGE = 5
        
        logger.info("TelegramHRBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # === –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ===
        @self.bot.message_handler(commands=['start'])
        def handle_start(message):
            self.handle_start_command(message)
        
        @self.bot.message_handler(commands=['help'])
        def handle_help(message):
            self.handle_help_command(message)
        
        @self.bot.message_handler(commands=['menu'])
        def handle_menu(message):
            self.show_main_menu(message)
        
        # === –ö–û–ú–ê–ù–î–´ –î–õ–Ø –†–ê–ë–û–¢–û–î–ê–¢–ï–õ–ï–ô ===
        @self.bot.message_handler(commands=['employer'])
        def handle_employer(message):
            self.switch_to_employer(message)
        
        @self.bot.message_handler(commands=['newjob'])
        def handle_new_job(message):
            self.start_job_creation(message)
        
        @self.bot.message_handler(commands=['myjobs'])
        def handle_my_jobs(message):
            self.show_employer_jobs(message)
        
        @self.bot.message_handler(commands=['applications'])
        def handle_applications(message):
            self.show_job_applications(message)
        
        # === –ö–û–ú–ê–ù–î–´ –î–õ–Ø –°–û–ò–°–ö–ê–¢–ï–õ–ï–ô ===
        @self.bot.message_handler(commands=['jobseeker'])
        def handle_jobseeker(message):
            self.switch_to_jobseeker(message)
        
        @self.bot.message_handler(commands=['jobs'])
        def handle_jobs(message):
            self.show_jobs_list(message)
        
        @self.bot.message_handler(commands=['search'])
        def handle_search(message):
            self.start_job_search(message)
        
        @self.bot.message_handler(commands=['myapps'])
        def handle_my_applications(message):
            self.show_my_applications(message)
        
        @self.bot.message_handler(commands=['subscribe'])
        def handle_subscribe(message):
            self.start_subscription_creation(message)
        
        @self.bot.message_handler(commands=['subscriptions'])
        def handle_subscriptions(message):
            self.show_subscriptions(message)
        
        # === –ö–û–ú–ê–ù–î–´ –ü–†–û–§–ò–õ–Ø ===
        @self.bot.message_handler(commands=['profile'])
        def handle_profile(message):
            self.show_profile(message)
        
        @self.bot.message_handler(commands=['settings'])
        def handle_settings(message):
            self.show_settings(message)
        
        # === –ë–´–°–¢–†–´–ï –ö–û–ú–ê–ù–î–´ ===
        @self.bot.message_handler(commands=['quick'])
        def handle_quick(message):
            self.show_quick_actions(message)
        
        @self.bot.message_handler(commands=['stats'])
        def handle_stats(message):
            self.show_user_stats(message)
        
        # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK ===
        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_callback(call):
            self.handle_callback_query(call)
        
        # === –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• –°–û–û–ë–©–ï–ù–ò–ô ===
        @self.bot.message_handler(func=lambda message: True)
        def handle_all_messages(message):
            self.handle_user_input(message)
    
    def get_or_create_user(self, telegram_user) -> User:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self.app.app_context():
            user = User.find_by_telegram_id(telegram_user.id)
            if not user:
                user = User.create_from_telegram(telegram_user)
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.telegram_id}")
            else:
                user.update_last_activity()
            return user
    
    def handle_start_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = self.get_or_create_user(message.from_user)
        
        welcome_text = f"""
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HR Bot!</b>

–ü—Ä–∏–≤–µ—Ç, {user.get_full_name()}! üëã

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ üëî <b>–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º</b> - –Ω–∞–π—Ç–∏ –ª—É—á—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
‚Ä¢ üíº <b>–°–æ–∏—Å–∫–∞—Ç–µ–ª—è–º</b> - –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –º–µ—á—Ç—ã

<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:</b>
        """
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("üëî –Ø —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å", callback_data="role_employer"),
            types.InlineKeyboardButton("üíº –Ø –∏—â—É —Ä–∞–±–æ—Ç—É", callback_data="role_jobseeker"),
            types.InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ", callback_data="about_bot")
        )
        
        self.bot.send_message(
            message.chat.id,
            welcome_text,
            parse_mode='HTML',
            reply_markup=markup
        )
    
    def handle_help_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        user = self.get_or_create_user(message.from_user)
        
        if user.is_employer():
            help_text = """
üìã <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π:</b>

<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏:</b>
/newjob - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é
/myjobs - –ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
/applications - –û—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏

<b>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
/quick - –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

<b>–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
            """
        else:
            help_text = """
üìã <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π:</b>

<b>–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã:</b>
/jobs - –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏
/search - –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π
/myapps - –ú–æ–∏ –æ—Ç–∫–ª–∏–∫–∏

<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/subscriptions - –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏

<b>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
/quick - –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

<b>–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
            """
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        
        self.bot.send_message(
            message.chat.id,
            help_text,
            parse_mode='HTML',
            reply_markup=markup
        )
    
    def show_main_menu(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = self.get_or_create_user(message.from_user)
        
        menu_text = f"üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {user.get_full_name()}\n–†–æ–ª—å: {user.user_type.title()}"
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        
        if user.is_employer():
            markup.add(
                types.InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è", callback_data="new_job"),
                types.InlineKeyboardButton("üìã –ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="my_jobs")
            )
            markup.add(
                types.InlineKeyboardButton("üì® –û—Ç–∫–ª–∏–∫–∏", callback_data="job_applications"),
                types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="employer_stats")
            )
        else:
            markup.add(
                types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã", callback_data="search_jobs"),
                types.InlineKeyboardButton("üìã –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="all_jobs")
            )
            markup.add(
                types.InlineKeyboardButton("üì® –ú–æ–∏ –æ—Ç–∫–ª–∏–∫–∏", callback_data="my_applications"),
                types.InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="subscriptions")
            )
        
        markup.add(
            types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
        )
        markup.add(
            types.InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="switch_role"),
            types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        )
        
        self.bot.send_message(
            message.chat.id,
            menu_text,
            parse_mode='HTML',
            reply_markup=markup
        )
    
    def show_quick_actions(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        user = self.get_or_create_user(message.from_user)
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        
        if user.is_employer():
            markup.add(
                types.InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–∞—è –≤–∞–∫–∞–Ω—Å–∏—è", callback_data="quick_job"),
                types.InlineKeyboardButton("üëÄ –ù–æ–≤—ã–µ –æ—Ç–∫–ª–∏–∫–∏", callback_data="new_applications")
            )
            markup.add(
                types.InlineKeyboardButton("üìà –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="today_stats"),
                types.InlineKeyboardButton("üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="popular_jobs")
            )
        else:
            markup.add(
                types.InlineKeyboardButton("üÜï –ù–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="latest_jobs"),
                types.InlineKeyboardButton("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="recommended_jobs")
            )
            markup.add(
                types.InlineKeyboardButton("üí∞ –í—ã—Å–æ–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–µ", callback_data="high_salary_jobs"),
                types.InlineKeyboardButton("üè† –£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞", callback_data="remote_jobs")
            )
        
        markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
        
        self.bot.send_message(
            message.chat.id,
            "‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='HTML',
            reply_markup=markup
        )
    
    def start_job_creation(self, message):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
        user = self.get_or_create_user(message.from_user)
        
        if not user.is_employer():
            self.bot.send_message(
                message.chat.id,
                "‚ùå –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /employer –¥–ª—è —Å–º–µ–Ω—ã —Ä–æ–ª–∏."
            )
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[message.from_user.id] = {
            'action': 'creating_job',
            'step': 'title',
            'job_data': {}
        }
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_job_creation"))
        
        self.bot.send_message(
            message.chat.id,
            "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏</b>\n\n"
            "–®–∞–≥ 1/6: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫</i>, <i>–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º</i>",
            parse_mode='HTML',
            reply_markup=markup
        )
    
    def show_jobs_list(self, message, page=1):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π"""
        with self.app.app_context():
            pagination = Job.search(page=page, per_page=self.JOBS_PER_PAGE)
            jobs = pagination.items
            
            if not jobs:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
                
                self.bot.send_message(
                    message.chat.id,
                    "üòî –í–∞–∫–∞–Ω—Å–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é!",
                    reply_markup=markup
                )
                return
            
            text = f"üìã <b>–í–∞–∫–∞–Ω—Å–∏–∏</b> (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{pagination.pages})\n\n"
            
            markup = types.InlineKeyboardMarkup(row_width=1)
            
            for job in jobs:
                job_text = f"üíº <b>{job.title}</b>\n"
                job_text += f"üè¢ {job.company}\n"
                job_text += f"üìç {job.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                job_text += f"üí∞ {job.get_salary_range()}\n"
                
                text += job_text + "\n"
                
                markup.add(
                    types.InlineKeyboardButton(
                        f"üëÄ {job.title[:30]}...",
                        callback_data=f"view_job_{job.id}"
                    )
                )
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            nav_buttons = []
            if pagination.has_prev:
                nav_buttons.append(
                    types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"jobs_page_{page-1}")
                )
            if pagination.has_next:
                nav_buttons.append(
                    types.InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"jobs_page_{page+1}")
                )
            
            if nav_buttons:
                markup.row(*nav_buttons)
            
            markup.add(
                types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search_jobs"),
                types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            )
            
            self.bot.send_message(
                message.chat.id,
                text,
                parse_mode='HTML',
                reply_markup=markup
            )
    
    def handle_callback_query(self, call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            data = call.data
            user = self.get_or_create_user(call.from_user)
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            if data == "main_menu":
                self.show_main_menu(call.message)
            elif data == "help":
                self.handle_help_command(call.message)
            elif data.startswith("role_"):
                self.handle_role_selection(call, data.split("_")[1])
            elif data == "switch_role":
                self.show_role_switch(call)
            elif data.startswith("view_job_"):
                job_id = int(data.split("_")[2])
                self.show_job_details(call, job_id)
            elif data.startswith("apply_job_"):
                job_id = int(data.split("_")[2])
                self.start_job_application(call, job_id)
            elif data.startswith("jobs_page_"):
                page = int(data.split("_")[2])
                self.show_jobs_list(call.message, page)
            # –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
            
            self.bot.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_callback_query: {e}")
            self.bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    def handle_user_input(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        user_id = message.from_user.id
        
        if user_id not in self.user_states:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            self.show_main_menu(message)
            return
        
        state = self.user_states[user_id]
        action = state.get('action')
        
        if action == 'creating_job':
            self.handle_job_creation_input(message, state)
        elif action == 'searching_jobs':
            self.handle_job_search_input(message, state)
        elif action == 'creating_subscription':
            self.handle_subscription_input(message, state)
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            del self.user_states[user_id]
            self.show_main_menu(message)
    
    def handle_job_creation_input(self, message, state):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏"""
        step = state['step']
        job_data = state['job_data']
        
        if step == 'title':
            job_data['title'] = message.text
            state['step'] = 'company'
            self.bot.send_message(
                message.chat.id,
                "–®–∞–≥ 2/6: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"
            )
        elif step == 'company':
            job_data['company'] = message.text
            state['step'] = 'location'
            self.bot.send_message(
                message.chat.id,
                "–®–∞–≥ 3/6: –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ú–æ—Å–∫–≤–∞</i>, <i>–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</i>, <i>–£–¥–∞–ª–µ–Ω–Ω–æ</i>",
                parse_mode='HTML'
            )
        elif step == 'location':
            job_data['location'] = message.text
            state['step'] = 'salary'
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_salary"))
            
            self.bot.send_message(
                message.chat.id,
                "–®–∞–≥ 4/6: –í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É\n"
                "–§–æ—Ä–º–∞—Ç: <i>–æ—Ç 100000</i>, <i>100000-150000</i> –∏–ª–∏ <i>–¥–æ 200000</i>",
                parse_mode='HTML',
                reply_markup=markup
            )
        elif step == 'salary':
            self.parse_salary(message.text, job_data)
            state['step'] = 'description'
            self.bot.send_message(
                message.chat.id,
                "–®–∞–≥ 5/6: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n"
                "–û–ø–∏—à–∏—Ç–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã"
            )
        elif step == 'description':
            job_data['description'] = message.text
            state['step'] = 'confirm'
            self.show_job_confirmation(message, job_data)
    
    def parse_salary(self, salary_text: str, job_data: dict):
        """–ü–∞—Ä—Å–∏—Ç –∑–∞—Ä–ø–ª–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        import re
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, —Ç–∏—Ä–µ –∏ —Å–ª–æ–≤ "–æ—Ç", "–¥–æ"
        clean_text = re.sub(r'[^\d\-–æ—Ç –¥–æ]', ' ', salary_text.lower())
        
        # –ò—â–µ–º —á–∏—Å–ª–∞
        numbers = re.findall(r'\d+', clean_text)
        
        if not numbers:
            return
        
        if '–æ—Ç' in clean_text and '–¥–æ' in clean_text:
            # –î–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç X –¥–æ Y
            if len(numbers) >= 2:
                job_data['salary_min'] = int(numbers[0])
                job_data['salary_max'] = int(numbers[1])
        elif '–æ—Ç' in clean_text:
            # –û—Ç X
            job_data['salary_min'] = int(numbers[0])
        elif '–¥–æ' in clean_text:
            # –î–æ X
            job_data['salary_max'] = int(numbers[0])
        elif '-' in salary_text and len(numbers) >= 2:
            # X-Y
            job_data['salary_min'] = int(numbers[0])
            job_data['salary_max'] = int(numbers[1])
        else:
            # –û–¥–Ω–æ —á–∏—Å–ª–æ - —Å—á–∏—Ç–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π
            job_data['salary_min'] = int(numbers[0])
    
    def show_job_confirmation(self, message, job_data):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
        text = "üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏</b>\n\n"
        text += f"üíº <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {job_data['title']}\n"
        text += f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {job_data['company']}\n"
        text += f"üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {job_data['location']}\n"
        
        if 'salary_min' in job_data or 'salary_max' in job_data:
            salary_min = job_data.get('salary_min', 0)
            salary_max = job_data.get('salary_max', 0)
            if salary_min and salary_max:
                text += f"üí∞ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> {salary_min:,} - {salary_max:,} —Ä—É–±.\n"
            elif salary_min:
                text += f"üí∞ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> –æ—Ç {salary_min:,} —Ä—É–±.\n"
            elif salary_max:
                text += f"üí∞ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> –¥–æ {salary_max:,} —Ä—É–±.\n"
        
        text += f"\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{job_data['description'][:200]}..."
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="confirm_job_creation"),
            types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_job")
        )
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_job_creation"))
        
        self.bot.send_message(
            message.chat.id,
            text,
            parse_mode='HTML',
            reply_markup=markup
        )
    
    def switch_to_employer(self, message):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è"""
        user = self.get_or_create_user(message.from_user)
        
        with self.app.app_context():
            user.user_type = 'employer'
            db.session.commit()
        
        self.bot.send_message(
            message.chat.id,
            "üëî –í—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –≤ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç–∫–ª–∏–∫–∏\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º."
        )
    
    def switch_to_jobseeker(self, message):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è"""
        user = self.get_or_create_user(message.from_user)
        
        with self.app.app_context():
            user.user_type = 'jobseeker'
            db.session.commit()
        
        self.bot.send_message(
            message.chat.id,
            "üíº –í—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –≤ —Ä–µ–∂–∏–º —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ò—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏\n"
            "‚Ä¢ –û—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏\n"
            "‚Ä¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º."
        )
    
    def start_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        self.bot.polling(none_stop=True)
    
    def handle_webhook(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook"""
        if request.headers.get('content-type') == 'application/json':
            json_string = request.get_data().decode('utf-8')
            update = telebot.types.Update.de_json(json_string)
            self.bot.process_new_updates([update])
            return "OK"
        else:
            return "Bad Request", 400

