import os
import sys
import json
import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, Any

import telebot
from telebot import types
from flask import Flask, request

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from user import User, db
from job import Job
from application import Application
from subscription import Subscription

logger = logging.getLogger(__name__)

class TelegramHRBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram HR Bot —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
    
    def __init__(self, token: str, flask_app: Flask):
        self.bot = telebot.TeleBot(token)
        self.app = flask_app
        self.user_states = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.logger = logger  # –î–æ–±–∞–≤–ª—è–µ–º logger –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞
        self.setup_handlers()
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        self.JOBS_PER_PAGE = 5
        self.APPLICATIONS_PER_PAGE = 5
        
        logger.info("TelegramHRBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def get_or_create_user(self, telegram_user):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç telegram_id"""
        with self.app.app_context():
            user = User.query.filter_by(telegram_id=telegram_user.id).first()
            if not user:
                user = User(
                    telegram_id=telegram_user.id,
                    username=telegram_user.username,
                    first_name=telegram_user.first_name,
                    last_name=telegram_user.last_name,
                    user_type='jobseeker',
                    is_active=True,
                    last_activity=datetime.utcnow()
                )
                db.session.add(user)
                db.session.commit()
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.telegram_id}")
            else:
                user.last_activity = datetime.utcnow()
                db.session.commit()
            
            return telegram_user.id

    def get_user(self, telegram_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ"""
        return User.query.filter_by(telegram_id=telegram_id).first()

    def handle_role_selection(self, call, role=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            telegram_id = call.from_user.id
            if role is None:
                role = call.data.split('_')[1]  # role_employer –∏–ª–∏ role_jobseeker
            
            with self.app.app_context():
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω–æ–≤–æ –∏–∑ –±–∞–∑—ã
                user = User.query.filter_by(telegram_id=telegram_id).first()
                if user:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å
                    user.user_type = role
                    db.session.commit()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å
                    db.session.refresh(user)
                    print(f"DEBUG: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {user.user_type}")
                    
                    if role == 'employer':
                        text = "üè¢ –û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å.\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏\n‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç–∫–ª–∏–∫–∏\n‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏"
                    else:
                        text = "üë§ –û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å.\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n‚Ä¢ –ò—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏\n‚Ä¢ –û—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                    
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
                    
                    self.bot.edit_message_text(
                        text=text,
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        reply_markup=markup
                    )
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_role_selection: {e}")
    
    def show_role_switch(self, call):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å–º–µ–Ω—ã —Ä–æ–ª–∏"""
        try:
            text = "üîÑ <b>–°–º–µ–Ω–∞ —Ä–æ–ª–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:"
            
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(
                types.InlineKeyboardButton("üëî –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å", callback_data="role_employer"),
                types.InlineKeyboardButton("üíº –°–æ–∏—Å–∫–∞—Ç–µ–ª—å", callback_data="role_jobseeker"),
                types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            )
            
            self.bot.edit_message_text(
                text=text,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode='HTML',
                reply_markup=markup
            )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ show_role_switch: {e}")
    
    def show_job_details(self, call, job_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–∏"""
        try:
            telegram_id = call.from_user.id
            
            with self.app.app_context():
                job = Job.query.get(job_id)
                if not job:
                    self.bot.answer_callback_query(call.id, "–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return
                
                user = self.get_user(telegram_id)
                
                text = f"üíº <b>{job.title}</b>\n\n"
                text += f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {job.company}\n"
                text += f"üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {job.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É
                if job.salary_min and job.salary_max:
                    text += f"üí∞ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> {job.salary_min:,} - {job.salary_max:,} —Ä—É–±.\n"
                elif job.salary_min:
                    text += f"üí∞ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> –æ—Ç {job.salary_min:,} —Ä—É–±.\n"
                elif job.salary_max:
                    text += f"üí∞ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> –¥–æ {job.salary_max:,} —Ä—É–±.\n"
                else:
                    text += f"üí∞ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> –ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏\n"
                
                text += f"üìÖ <b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:</b> {job.created_at.strftime('%d.%m.%Y')}\n"
                
                # –°—á–∏—Ç–∞–µ–º –æ—Ç–∫–ª–∏–∫–∏
                applications_count = Application.query.filter_by(job_id=job_id).count()
                text += f"üì® <b>–û—Ç–∫–ª–∏–∫–æ–≤:</b> {applications_count}\n\n"
                text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{job.description}"
                
                markup = types.InlineKeyboardMarkup(row_width=2)
                
                if user and user.user_type == 'jobseeker':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–ª–∏–∫–∞–ª—Å—è –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    existing_app = Application.query.filter_by(
                        job_id=job_id,
                        applicant_id=user.id
                    ).first()
                    
                    if not existing_app:
                        markup.add(
                            types.InlineKeyboardButton("üì® –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"apply_job_{job_id}")
                        )
                    else:
                        markup.add(
                            types.InlineKeyboardButton("‚úÖ –£–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å", callback_data="already_applied")
                        )
                
                markup.add(
                    types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="all_jobs"),
                    types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                )
                
                self.bot.edit_message_text(
                    text=text,
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    parse_mode='HTML',
                    reply_markup=markup
                )
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ show_job_details: {e}")
    
    def start_job_application(self, call, job_id):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é"""
        try:
            telegram_id = call.from_user.id
            
            with self.app.app_context():
                user = self.get_user(telegram_id)
                
                if not user or user.user_type != 'jobseeker':
                    self.bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫–ª–∏–∫–∞–ª—Å—è –ª–∏ —É–∂–µ
                existing_app = Application.query.filter_by(
                    job_id=job_id,
                    applicant_id=user.id
                ).first()
                
                if existing_app:
                    self.bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é")
                    return
                
                job = Job.query.get(job_id)
                if not job:
                    self.bot.answer_callback_query(call.id, "–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return
                
                # –°–æ–∑–¥–∞–µ–º –æ—Ç–∫–ª–∏–∫
                application = Application(
                    job_id=job_id,
                    applicant_id=user.id,
                    cover_letter="–û—Ç–∫–ª–∏–∫ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞",
                    status='pending',
                    created_at=datetime.utcnow()
                )
                db.session.add(application)
                db.session.commit()
                
                text = f"‚úÖ <b>–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
                text += f"–í—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é:\n"
                text += f"üíº <b>{job.title}</b>\n"
                text += f"üè¢ {job.company}\n\n"
                text += f"–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–µ–º –æ—Ç–∫–ª–∏–∫–µ."
                
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("üì® –ú–æ–∏ –æ—Ç–∫–ª–∏–∫–∏", callback_data="my_applications"),
                    types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                )
                
                self.bot.edit_message_text(
                    text=text,
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    parse_mode='HTML',
                    reply_markup=markup
                )
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ start_job_application: {e}")
    
    def view_application_details(self, call, application_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ—Ç–∫–ª–∏–∫–∞"""
        try:
            with self.app.app_context():
                application = Application.query.get(application_id)
                if not application:
                    self.bot.answer_callback_query(call.id, "–û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                job = Job.query.get(application.job_id)
                applicant = User.query.get(application.applicant_id)
                
                if not job or not applicant:
                    self.bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return
                
                status_names = {
                    'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è',
                    'accepted': '‚úÖ –ü—Ä–∏–Ω—è—Ç',
                    'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω'
                }
                
                text = f"üì® <b>–î–µ—Ç–∞–ª–∏ –æ—Ç–∫–ª–∏–∫–∞</b>\n\n"
                text += f"üíº <b>–í–∞–∫–∞–Ω—Å–∏—è:</b> {job.title}\n"
                text += f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {job.company}\n\n"
                text += f"üë§ <b>–°–æ–∏—Å–∫–∞—Ç–µ–ª—å:</b> {applicant.get_full_name()}\n"
                if applicant.username:
                    text += f"üì± <b>Username:</b> @{applicant.username}\n"
                text += f"üìÖ <b>–î–∞—Ç–∞ –æ—Ç–∫–ª–∏–∫–∞:</b> {application.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_names.get(application.status, application.status)}\n\n"
                
                if application.cover_letter:
                    text += f"üìù <b>–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ:</b>\n{application.cover_letter}"
                
                markup = types.InlineKeyboardMarkup(row_width=2)
                
                if application.status == 'pending':
                    markup.add(
                        types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_app_{application_id}"),
                        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_app_{application_id}")
                    )
                
                markup.add(
                    types.InlineKeyboardButton("‚¨ÖÔ∏è –ö –æ—Ç–∫–ª–∏–∫–∞–º", callback_data="job_applications"),
                    types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                )
                
                self.bot.edit_message_text(
                    text=text,
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    parse_mode='HTML',
                    reply_markup=markup
                )
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ view_application_details: {e}")
    
    def accept_application(self, call, application_id):
        """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç–∫–ª–∏–∫"""
        try:
            with self.app.app_context():
                application = Application.query.get(application_id)
                if not application:
                    self.bot.answer_callback_query(call.id, "–û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                application.status = 'accepted'
                db.session.commit()
                
                self.bot.answer_callback_query(call.id, "‚úÖ –û—Ç–∫–ª–∏–∫ –ø—Ä–∏–Ω—è—Ç!")
                self.view_application_details(call, application_id)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ accept_application: {e}")
    
    def reject_application(self, call, application_id):
        """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –æ—Ç–∫–ª–∏–∫"""
        try:
            with self.app.app_context():
                application = Application.query.get(application_id)
                if not application:
                    self.bot.answer_callback_query(call.id, "–û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                application.status = 'rejected'
                db.session.commit()
                
                self.bot.answer_callback_query(call.id, "‚ùå –û—Ç–∫–ª–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
                self.view_application_details(call, application_id)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ reject_application: {e}")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # === –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ===
        @self.bot.message_handler(commands=['start'])
        def handle_start(message):
            self.handle_start_command(message)
        
        @self.bot.message_handler(commands=['help'])
        def handle_help(message):
            self.handle_help_command(message)
        
        @self.bot.message_handler(commands=['menu'])
        def handle_menu(message):
            self.show_main_menu(message)
        
        # === –ö–û–ú–ê–ù–î–´ –î–õ–Ø –†–ê–ë–û–¢–û–î–ê–¢–ï–õ–ï–ô ===
        @self.bot.message_handler(commands=['employer'])
        def handle_employer(message):
            self.switch_to_employer(message)
        
        @self.bot.message_handler(commands=['newjob'])
        def handle_new_job(message):
            self.start_job_creation(message)
        
        @self.bot.message_handler(commands=['myjobs'])
        def handle_my_jobs(message):
            self.show_employer_jobs(message)
        
        @self.bot.message_handler(commands=['applications'])
        def handle_applications(message):
            self.show_job_applications(message)
        
        # === –ö–û–ú–ê–ù–î–´ –î–õ–Ø –°–û–ò–°–ö–ê–¢–ï–õ–ï–ô ===
        @self.bot.message_handler(commands=['jobseeker'])
        def handle_jobseeker(message):
            self.switch_to_jobseeker(message)
        
        @self.bot.message_handler(commands=['jobs'])
        def handle_jobs(message):
            self.show_jobs_list(message)
        
        @self.bot.message_handler(commands=['search'])
        def handle_search(message):
            self.start_job_search(message)
        
        @self.bot.message_handler(commands=['myapps'])
        def handle_my_applications(message):
            self.show_my_applications(message)
        
        @self.bot.message_handler(commands=['subscribe'])
        def handle_subscribe(message):
            self.start_subscription_creation(message)
        
        @self.bot.message_handler(commands=['subscriptions'])
        def handle_subscriptions(message):
            self.show_subscriptions(message)
        
        # === –ö–û–ú–ê–ù–î–´ –ü–†–û–§–ò–õ–Ø ===
        @self.bot.message_handler(commands=['profile'])
        def handle_profile(message):
            self.show_profile(message)
        
        @self.bot.message_handler(commands=['settings'])
        def handle_settings(message):
            self.show_settings(message)
        
        # === –ë–´–°–¢–†–´–ï –ö–û–ú–ê–ù–î–´ ===
        @self.bot.message_handler(commands=['quick'])
        def handle_quick(message):
            self.show_quick_actions(message)
        
        @self.bot.message_handler(commands=['stats'])
        def handle_stats(message):
            self.show_user_stats(message)
        
        # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK ===
        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_callback(call):
            self.handle_callback_query(call)
        
        # === –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• –°–û–û–ë–©–ï–ù–ò–ô ===
        @self.bot.message_handler(func=lambda message: True)
        def handle_all_messages(message):
            self.handle_user_input(message)
    
    def handle_start_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        telegram_id = self.get_or_create_user(message.from_user)
        
        with self.app.app_context():
            user = self.get_user(telegram_id)
            
            welcome_text = f"""
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HR Bot!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ üëî <b>–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º</b> - –Ω–∞–π—Ç–∏ –ª—É—á—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
‚Ä¢ üíº <b>–°–æ–∏—Å–∫–∞—Ç–µ–ª—è–º</b> - –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –º–µ—á—Ç—ã

<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:</b>
            """
            
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(
                types.InlineKeyboardButton("üëî –Ø —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å", callback_data="role_employer"),
                types.InlineKeyboardButton("üíº –Ø –∏—â—É —Ä–∞–±–æ—Ç—É", callback_data="role_jobseeker"),
                types.InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ", callback_data="about_bot")
            )
            
            self.bot.send_message(
                message.chat.id,
                welcome_text,
                parse_mode='HTML',
                reply_markup=markup
            )
    
    def handle_help_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        telegram_id = self.get_or_create_user(message.from_user)
        
        with self.app.app_context():
            user = self.get_user(telegram_id)
            
            if user and user.user_type == 'employer':
                help_text = """
üìã <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π:</b>

<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏:</b>
/newjob - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é
/myjobs - –ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
/applications - –û—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏

<b>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
/quick - –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

<b>–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
                """
            else:
                help_text = """
üìã <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π:</b>

<b>–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã:</b>
/jobs - –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏
/search - –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π
/myapps - –ú–æ–∏ –æ—Ç–∫–ª–∏–∫–∏

<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/subscriptions - –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏

<b>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
/quick - –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

<b>–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
                """
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
            
            self.bot.send_message(
                message.chat.id,
                help_text,
                parse_mode='HTML',
                reply_markup=markup
            )
    
    def show_main_menu(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∫–æ–º–∞–Ω–¥"""
        telegram_id = self.get_or_create_user(message.from_user)
        
        with self.app.app_context():
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω–æ–≤–æ –∏–∑ –±–∞–∑—ã
            user = User.query.filter_by(telegram_id=telegram_id).first()
            
            print(f"DEBUG: –ö–æ–º–∞–Ω–¥–∞ - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id}, —Ä–æ–ª—å: {user.user_type}")
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ä–æ–ª—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            role_names = {
                'employer': '–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å',
                'jobseeker': '–°–æ–∏—Å–∫–∞—Ç–µ–ª—å'
            }
            role_display = role_names.get(user.user_type, user.user_type.title())
            
            menu_text = f"üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {user.first_name}\n–†–æ–ª—å: {role_display}"
            
            markup = types.InlineKeyboardMarkup(row_width=2)
            
            if user.user_type == 'employer':
                markup.add(
                    types.InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è", callback_data="new_job"),
                    types.InlineKeyboardButton("üìã –ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="my_jobs")
                )
                markup.add(
                    types.InlineKeyboardButton("üì® –û—Ç–∫–ª–∏–∫–∏", callback_data="job_applications"),
                    types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="employer_stats")
                )
            else:
                markup.add(
                    types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã", callback_data="search_jobs"),
                    types.InlineKeyboardButton("üìã –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="all_jobs")
                )
                markup.add(
                    types.InlineKeyboardButton("üì® –ú–æ–∏ –æ—Ç–∫–ª–∏–∫–∏", callback_data="my_applications"),
                    types.InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="subscriptions")
                )
            
            markup.add(
                types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
            )
            markup.add(
                types.InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="switch_role"),
                types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            )
            
            self.bot.send_message(
                message.chat.id,
                menu_text,
                parse_mode='HTML',
                reply_markup=markup
            )

    def show_main_menu_callback(self, call):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ callback"""
        telegram_id = call.from_user.id
        
        with self.app.app_context():
            user = User.query.filter_by(telegram_id=telegram_id).first()
            
            print(f"DEBUG: Callback - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id}, —Ä–æ–ª—å: {user.user_type}")
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ä–æ–ª—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            role_names = {
                'employer': '–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å',
                'jobseeker': '–°–æ–∏—Å–∫–∞—Ç–µ–ª—å'
            }
            role_display = role_names.get(user.user_type, user.user_type.title())
            
            menu_text = f"üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã –≤–æ—à–ª–∏ –∫–∞–∫: {user.first_name}\n–†–æ–ª—å: {role_display}"
            
            markup = types.InlineKeyboardMarkup(row_width=2)
            
            if user.user_type == 'employer':
                markup.add(
                    types.InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è", callback_data="new_job"),
                    types.InlineKeyboardButton("üìã –ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="my_jobs")
                )
                markup.add(
                    types.InlineKeyboardButton("üì® –û—Ç–∫–ª–∏–∫–∏", callback_data="job_applications"),
                    types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="employer_stats")
                )
            else:
                markup.add(
                    types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã", callback_data="search_jobs"),
                    types.InlineKeyboardButton("üìã –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="all_jobs")
                )
                markup.add(
                    types.InlineKeyboardButton("üì® –ú–æ–∏ –æ—Ç–∫–ª–∏–∫–∏", callback_data="my_applications"),
                    types.InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="subscriptions")
                )
            
            markup.add(
                types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
            )
            markup.add(
                types.InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="switch_role"),
                types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            )
            
            self.bot.edit_message_text(
                text=menu_text,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode='HTML',
                reply_markup=markup
            )
    
    def show_quick_actions(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        telegram_id = self.get_or_create_user(message.from_user)
        
        with self.app.app_context():
            user = self.get_user(telegram_id)
            
            markup = types.InlineKeyboardMarkup(row_width=2)
            
            if user.user_type == 'employer':
                markup.add(
                    types.InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä–∞—è –≤–∞–∫–∞–Ω—Å–∏—è", callback_data="new_job"),
                    types.InlineKeyboardButton("üëÄ –ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="my_jobs")
                )
                markup.add(
                    types.InlineKeyboardButton("üì® –ù–æ–≤—ã–µ –æ—Ç–∫–ª–∏–∫–∏", callback_data="job_applications"),
                    types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="employer_stats")
                )
            else:
                markup.add(
                    types.InlineKeyboardButton("üÜï –ù–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="all_jobs"),
                    types.InlineKeyboardButton("üéØ –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="all_jobs")
                )
                markup.add(
                    types.InlineKeyboardButton("üì® –ú–æ–∏ –æ—Ç–∫–ª–∏–∫–∏", callback_data="my_applications"),
                    types.InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="subscriptions")
                )
            
            markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
            
            self.bot.send_message(
                message.chat.id,
                "‚ö° <b>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode='HTML',
                reply_markup=markup
            )
    
    def start_job_creation(self, message):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
        telegram_id = self.get_or_create_user(message.from_user)
        
        with self.app.app_context():
            user = self.get_user(telegram_id)
            
            if not user or user.user_type != 'employer':
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /employer –¥–ª—è —Å–º–µ–Ω—ã —Ä–æ–ª–∏."
                )
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_states[message.from_user.id] = {
                'action': 'creating_job',
                'step': 'title',
                'job_data': {}
            }
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_job_creation"))
            
            self.bot.send_message(
                message.chat.id,
                "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏</b>\n\n"
                "–®–∞–≥ 1/5: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫</i>, <i>–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º</i>",
                parse_mode='HTML',
                reply_markup=markup
            )
    
    def show_jobs_list(self, message, page=1):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π"""
        with self.app.app_context():
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
            jobs = Job.query.filter_by(is_active=True).offset((page-1)*self.JOBS_PER_PAGE).limit(self.JOBS_PER_PAGE).all()
            total_jobs = Job.query.filter_by(is_active=True).count()
            total_pages = (total_jobs + self.JOBS_PER_PAGE - 1) // self.JOBS_PER_PAGE
            
            if not jobs:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
                
                self.bot.send_message(
                    message.chat.id,
                    "üòî –í–∞–∫–∞–Ω—Å–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é!",
                    reply_markup=markup
                )
                return
            
            text = f"üìã <b>–í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏</b> (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})\n\n"
            
            markup = types.InlineKeyboardMarkup(row_width=1)
            
            for job in jobs:
                job_text = f"üíº <b>{job.title}</b>\n"
                job_text += f"üè¢ {job.company}\n"
                job_text += f"üìç {job.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                
                if job.salary_min and job.salary_max:
                    job_text += f"üí∞ {job.salary_min:,} - {job.salary_max:,} —Ä—É–±.\n"
                elif job.salary_min:
                    job_text += f"üí∞ –æ—Ç {job.salary_min:,} —Ä—É–±.\n"
                elif job.salary_max:
                    job_text += f"üí∞ –¥–æ {job.salary_max:,} —Ä—É–±.\n"
                else:
                    job_text += f"üí∞ –ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏\n"
                
                text += job_text + "\n"
                
                markup.add(
                    types.InlineKeyboardButton(
                        f"üëÄ {job.title[:30]}...",
                        callback_data=f"view_job_{job.id}"
                    )
                )
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            nav_buttons = []
            if page > 1:
                nav_buttons.append(
                    types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"jobs_page_{page-1}")
                )
            if page < total_pages:
                nav_buttons.append(
                    types.InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"jobs_page_{page+1}")
                )
            
            if nav_buttons:
                markup.row(*nav_buttons)
            
            markup.add(
                types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search_jobs"),
                types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            )
            
            self.bot.send_message(
                message.chat.id,
                text,
                parse_mode='HTML',
                reply_markup=markup
            )

    def show_employer_jobs(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è"""
        telegram_id = self.get_or_create_user(message.from_user)
        
        with self.app.app_context():
            user = self.get_user(telegram_id)
            
            if user.user_type != 'employer':
                self.bot.send_message(message.chat.id, "‚ùå –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏")
                return
            
            jobs = Job.query.filter_by(employer_id=user.id, is_active=True).all()
            
            if not jobs:
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="new_job"),
                    types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                )
                
                self.bot.send_message(
                    message.chat.id,
                    "üìã <b>–ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏</b>\n\nüòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é!",
                    parse_mode='HTML',
                    reply_markup=markup
                )
                return
            
            text = f"üìã <b>–ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏</b> ({len(jobs)})\n\n"
            
            markup = types.InlineKeyboardMarkup(row_width=1)
            
            for job in jobs:
                # –°—á–∏—Ç–∞–µ–º –æ—Ç–∫–ª–∏–∫–∏
                applications_count = Application.query.filter_by(job_id=job.id).count()
                
                job_text = f"üíº <b>{job.title}</b>\n"
                job_text += f"üè¢ {job.company}\n"
                job_text += f"üì® –û—Ç–∫–ª–∏–∫–æ–≤: {applications_count}\n"
                job_text += f"üìÖ {job.created_at.strftime('%d.%m.%Y')}\n\n"
                
                text += job_text
                
                markup.add(
                    types.InlineKeyboardButton(
                        f"üëÄ {job.title[:25]}... ({applications_count} –æ—Ç–∫–ª–∏–∫–æ–≤)",
                        callback_data=f"employer_job_{job.id}"
                    )
                )
            
            markup.add(
                types.InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è", callback_data="new_job"),
                types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            )
            
            self.bot.send_message(
                message.chat.id,
                text,
                parse_mode='HTML',
                reply_markup=markup
            )

    def show_job_applications(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è"""
        telegram_id = self.get_or_create_user(message.from_user)
        
        with self.app.app_context():
            user = self.get_user(telegram_id)
            
            if user.user_type != 'employer':
                self.bot.send_message(message.chat.id, "‚ùå –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç–∫–ª–∏–∫–∏")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
            jobs = Job.query.filter_by(employer_id=user.id, is_active=True).all()
            
            if not jobs:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
                
                self.bot.send_message(
                    message.chat.id,
                    "üì® <b>–û—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏</b>\n\nüòî –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.",
                    parse_mode='HTML',
                    reply_markup=markup
                )
                return
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏
            all_applications = []
            for job in jobs:
                applications = Application.query.filter_by(job_id=job.id).all()
                for app in applications:
                    app.job = job  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏
                    all_applications.append(app)
            
            if not all_applications:
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("üìã –ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="my_jobs"),
                    types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                )
                
                self.bot.send_message(
                    message.chat.id,
                    "üì® <b>–û—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏</b>\n\nüòî –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –≤–∞—à–∏ –≤–∞–∫–∞–Ω—Å–∏–∏.",
                    parse_mode='HTML',
                    reply_markup=markup
                )
                return
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            all_applications.sort(key=lambda x: x.created_at, reverse=True)
            
            text = f"üì® <b>–û—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏</b> ({len(all_applications)})\n\n"
            
            markup = types.InlineKeyboardMarkup(row_width=1)
            
            for app in all_applications:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ
                applicant = User.query.get(app.applicant_id)
                
                status_emoji = {
                    'pending': '‚è≥',
                    'accepted': '‚úÖ',
                    'rejected': '‚ùå'
                }.get(app.status, '‚ùì')
                
                app_text = f"{status_emoji} <b>{app.job.title}</b>\n"
                app_text += f"üë§ {applicant.get_full_name() if applicant else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}\n"
                app_text += f"üìÖ {app.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                
                text += app_text
                
                markup.add(
                    types.InlineKeyboardButton(
                        f"{status_emoji} {applicant.get_full_name()[:20]}... ‚Üí {app.job.title[:15]}...",
                        callback_data=f"view_application_{app.id}"
                    )
                )
            
            markup.add(
                types.InlineKeyboardButton("üìã –ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="my_jobs"),
                types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            )
            
            self.bot.send_message(
                message.chat.id,
                text,
                parse_mode='HTML',
                reply_markup=markup
            )

    def show_my_applications(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∫–ª–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        telegram_id = self.get_or_create_user(message.from_user)
        
        with self.app.app_context():
            user = self.get_user(telegram_id)
            
            if user.user_type != 'jobseeker':
                self.bot.send_message(message.chat.id, "‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –æ—Ç–∫–ª–∏–∫–∏")
                return
            
            applications = Application.query.filter_by(applicant_id=user.id).all()
            
            if not applications:
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="all_jobs"),
                    types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                )
                
                self.bot.send_message(
                    message.chat.id,
                    "üì® <b>–ú–æ–∏ –æ—Ç–∫–ª–∏–∫–∏</b>\n\nüòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤.\n\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏!",
                    parse_mode='HTML',
                    reply_markup=markup
                )
                return
            
            text = f"üì® <b>–ú–æ–∏ –æ—Ç–∫–ª–∏–∫–∏</b> ({len(applications)})\n\n"
            
            markup = types.InlineKeyboardMarkup(row_width=1)
            
            for app in applications:
                job = Job.query.get(app.job_id)
                if job:
                    status_emoji = {
                        'pending': '‚è≥',
                        'accepted': '‚úÖ',
                        'rejected': '‚ùå'
                    }.get(app.status, '‚ùì')
                    
                    app_text = f"{status_emoji} <b>{job.title}</b>\n"
                    app_text += f"üè¢ {job.company}\n"
                    app_text += f"üìÖ {app.created_at.strftime('%d.%m.%Y')}\n\n"
                    
                    text += app_text
                    
                    markup.add(
                        types.InlineKeyboardButton(
                            f"{status_emoji} {job.title[:25]}...",
                            callback_data=f"view_job_{job.id}"
                        )
                    )
            
            markup.add(
                types.InlineKeyboardButton("üìã –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="all_jobs"),
                types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            )
            
            self.bot.send_message(
                message.chat.id,
                text,
                parse_mode='HTML',
                reply_markup=markup
            )

    def show_employer_stats(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è"""
        telegram_id = self.get_or_create_user(message.from_user)
        
        with self.app.app_context():
            user = self.get_user(telegram_id)
            
            if user.user_type != 'employer':
                self.bot.send_message(message.chat.id, "‚ùå –¢–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_jobs = Job.query.filter_by(employer_id=user.id, is_active=True).count()
            total_applications = db.session.query(Application).join(Job).filter(Job.employer_id == user.id).count()
            pending_applications = db.session.query(Application).join(Job).filter(
                Job.employer_id == user.id, 
                Application.status == 'pending'
            ).count()
            accepted_applications = db.session.query(Application).join(Job).filter(
                Job.employer_id == user.id, 
                Application.status == 'accepted'
            ).count()
            
            text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è</b>\n\n"
            text += f"üìã <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:</b> {total_jobs}\n"
            text += f"üì® <b>–í—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–æ–≤:</b> {total_applications}\n"
            text += f"‚è≥ <b>–û–∂–∏–¥–∞—é—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è:</b> {pending_applications}\n"
            text += f"‚úÖ <b>–ü—Ä–∏–Ω—è—Ç–æ:</b> {accepted_applications}\n\n"
            
            if total_jobs > 0:
                avg_applications = total_applications / total_jobs
                text += f"üìà <b>–°—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é:</b> {avg_applications:.1f}\n"
            
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("üìã –ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="my_jobs"),
                types.InlineKeyboardButton("üì® –û—Ç–∫–ª–∏–∫–∏", callback_data="job_applications")
            )
            markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
            
            self.bot.send_message(
                message.chat.id,
                text,
                parse_mode='HTML',
                reply_markup=markup
            )
    
    def handle_callback_query(self, call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            data = call.data
            telegram_id = self.get_or_create_user(call.from_user)
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            if data == "main_menu":
                self.show_main_menu_callback(call)
            elif data == "help":
                fake_message = type('obj', (object,), {
                    'chat': call.message.chat,
                    'from_user': call.from_user
                })
                self.handle_help_command(fake_message)
            elif data.startswith("role_"):
                self.handle_role_selection(call)
            elif data == "switch_role":
                self.show_role_switch(call)
            elif data == "new_job":
                fake_message = type('obj', (object,), {
                    'chat': call.message.chat,
                    'from_user': call.from_user
                })
                self.start_job_creation(fake_message)
            elif data == "my_jobs":
                fake_message = type('obj', (object,), {
                    'chat': call.message.chat,
                    'from_user': call.from_user
                })
                self.show_employer_jobs(fake_message)
            elif data == "job_applications":
                fake_message = type('obj', (object,), {
                    'chat': call.message.chat,
                    'from_user': call.from_user
                })
                self.show_job_applications(fake_message)
            elif data == "employer_stats":
                fake_message = type('obj', (object,), {
                    'chat': call.message.chat,
                    'from_user': call.from_user
                })
                self.show_employer_stats(fake_message)
            elif data == "all_jobs":
                fake_message = type('obj', (object,), {
                    'chat': call.message.chat,
                    'from_user': call.from_user
                })
                self.show_jobs_list(fake_message)
            elif data == "my_applications":
                fake_message = type('obj', (object,), {
                    'chat': call.message.chat,
                    'from_user': call.from_user
                })
                self.show_my_applications(fake_message)
            elif data.startswith("view_job_"):
                job_id = int(data.split("_")[2])
                self.show_job_details(call, job_id)
            elif data.startswith("view_application_"):
                application_id = int(data.split("_")[2])
                self.view_application_details(call, application_id)
            elif data.startswith("accept_app_"):
                application_id = int(data.split("_")[2])
                self.accept_application(call, application_id)
            elif data.startswith("reject_app_"):
                application_id = int(data.split("_")[2])
                self.reject_application(call, application_id)
            elif data.startswith("apply_job_"):
                job_id = int(data.split("_")[2])
                self.start_job_application(call, job_id)
            elif data.startswith("jobs_page_"):
                page = int(data.split("_")[2])
                fake_message = type('obj', (object,), {
                    'chat': call.message.chat,
                    'from_user': call.from_user
                })
                self.show_jobs_list(fake_message, page)
            elif data == "already_applied":
                self.bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é")
            elif data == "about_bot":
                self.show_about_bot(call)
            elif data == "cancel_job_creation":
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if call.from_user.id in self.user_states:
                    del self.user_states[call.from_user.id]
                self.bot.edit_message_text(
                    text="‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id
                )
                self.show_main_menu_callback(call)
            elif data == "confirm_job_creation":
                self.confirm_job_creation(call)
            else:
                self.bot.answer_callback_query(call.id, "üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            
            self.bot.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_callback_query: {e}")
            self.bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    def confirm_job_creation(self, call):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏"""
        try:
            user_id = call.from_user.id
            if user_id not in self.user_states:
                self.bot.answer_callback_query(call.id, "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
                return
            
            state = self.user_states[user_id]
            job_data = state.get('job_data', {})
            
            with self.app.app_context():
                user = self.get_user(call.from_user.id)
                
                # –°–æ–∑–¥–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
                job = Job(
                    title=job_data.get('title', ''),
                    company=job_data.get('company', ''),
                    location=job_data.get('location', ''),
                    salary_min=job_data.get('salary_min'),
                    salary_max=job_data.get('salary_max'),
                    description=job_data.get('description', ''),
                    employer_id=user.id,
                    employment_type='full-time',
                    experience_level='middle',
                    skills_required='',
                    is_active=True,
                    created_at=datetime.utcnow()
                )
                
                db.session.add(job)
                db.session.commit()
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                del self.user_states[user_id]
                
                text = f"‚úÖ <b>–í–∞–∫–∞–Ω—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                text += f"üíº <b>{job.title}</b>\n"
                text += f"üè¢ {job.company}\n"
                text += f"üìç {job.location}\n\n"
                text += f"–í–∞–∫–∞–Ω—Å–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π!"
                
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("üìã –ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="my_jobs"),
                    types.InlineKeyboardButton("‚ûï –ï—â–µ –≤–∞–∫–∞–Ω—Å–∏—è", callback_data="new_job")
                )
                markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
                
                self.bot.edit_message_text(
                    text=text,
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    parse_mode='HTML',
                    reply_markup=markup
                )
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_job_creation: {e}")
    
    def show_about_bot(self, call):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
        text = """
‚ÑπÔ∏è <b>–û HR Bot</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ—Ç—ã –∏ –ø–æ–¥–±–æ—Ä–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.

<b>–î–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π:</b>
‚Ä¢ –ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

<b>–î–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π:</b>
‚Ä¢ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞–º–∏
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞–∫–∞–Ω—Å–∏—è–º
‚Ä¢ –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!
        """
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("üëî –Ø —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å", callback_data="role_employer"),
            types.InlineKeyboardButton("üíº –Ø –∏—â—É —Ä–∞–±–æ—Ç—É", callback_data="role_jobseeker"),
            types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        )
        
        self.bot.edit_message_text(
            text=text,
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode='HTML',
            reply_markup=markup
        )
    
    def handle_user_input(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        user_id = message.from_user.id
        
        if user_id not in self.user_states:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
            self.show_main_menu(message)
            return
        
        state = self.user_states[user_id]
        action = state.get('action')
        
        if action == 'creating_job':
            self.handle_job_creation_input(message, state)
        elif action == 'searching_jobs':
            self.handle_job_search_input(message, state)
        elif action == 'creating_subscription':
            self.handle_subscription_input(message, state)
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            del self.user_states[user_id]
            self.show_main_menu(message)
    
    def handle_job_creation_input(self, message, state):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏"""
        step = state['step']
        job_data = state['job_data']
        
        if step == 'title':
            job_data['title'] = message.text
            state['step'] = 'company'
            self.bot.send_message(
                message.chat.id,
                "–®–∞–≥ 2/5: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"
            )
        elif step == 'company':
            job_data['company'] = message.text
            state['step'] = 'location'
            self.bot.send_message(
                message.chat.id,
                "–®–∞–≥ 3/5: –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ú–æ—Å–∫–≤–∞</i>, <i>–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</i>, <i>–£–¥–∞–ª–µ–Ω–Ω–æ</i>",
                parse_mode='HTML'
            )
        elif step == 'location':
            job_data['location'] = message.text
            state['step'] = 'salary'
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_salary"))
            
            self.bot.send_message(
                message.chat.id,
                "–®–∞–≥ 4/5: –í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É\n"
                "–§–æ—Ä–º–∞—Ç: <i>–æ—Ç 100000</i>, <i>100000-150000</i> –∏–ª–∏ <i>–¥–æ 200000</i>\n"
                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
                parse_mode='HTML',
                reply_markup=markup
            )
        elif step == 'salary':
            self.parse_salary(message.text, job_data)
            state['step'] = 'description'
            self.bot.send_message(
                message.chat.id,
                "–®–∞–≥ 5/5: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n"
                "–û–ø–∏—à–∏—Ç–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã"
            )
        elif step == 'description':
            job_data['description'] = message.text
            state['step'] = 'confirm'
            self.show_job_confirmation(message, job_data)
    
    def parse_salary(self, salary_text: str, job_data: dict):
        """–ü–∞—Ä—Å–∏—Ç –∑–∞—Ä–ø–ª–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        import re
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, —Ç–∏—Ä–µ –∏ —Å–ª–æ–≤ "–æ—Ç", "–¥–æ"
        clean_text = re.sub(r'[^\d\-–æ—Ç –¥–æ]', ' ', salary_text.lower())
        
        # –ò—â–µ–º —á–∏—Å–ª–∞
        numbers = re.findall(r'\d+', clean_text)
        
        if not numbers:
            return
        
        if '–æ—Ç' in clean_text and '–¥–æ' in clean_text:
            # –î–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç X –¥–æ Y
            if len(numbers) >= 2:
                job_data['salary_min'] = int(numbers[0])
                job_data['salary_max'] = int(numbers[1])
        elif '–æ—Ç' in clean_text:
            # –û—Ç X
            job_data['salary_min'] = int(numbers[0])
        elif '–¥–æ' in clean_text:
            # –î–æ X
            job_data['salary_max'] = int(numbers[0])
        elif '-' in salary_text and len(numbers) >= 2:
            # X-Y
            job_data['salary_min'] = int(numbers[0])
            job_data['salary_max'] = int(numbers[1])
        else:
            # –û–¥–Ω–æ —á–∏—Å–ª–æ - —Å—á–∏—Ç–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π
            job_data['salary_min'] = int(numbers[0])
    
    def show_job_confirmation(self, message, job_data):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
        text = "üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏</b>\n\n"
        text += f"üíº <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {job_data['title']}\n"
        text += f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {job_data['company']}\n"
        text += f"üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {job_data['location']}\n"
        
        if 'salary_min' in job_data or 'salary_max' in job_data:
            salary_min = job_data.get('salary_min', 0)
            salary_max = job_data.get('salary_max', 0)
            if salary_min and salary_max:
                text += f"üí∞ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> {salary_min:,} - {salary_max:,} —Ä—É–±.\n"
            elif salary_min:
                text += f"üí∞ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> –æ—Ç {salary_min:,} —Ä—É–±.\n"
            elif salary_max:
                text += f"üí∞ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> –¥–æ {salary_max:,} —Ä—É–±.\n"
        else:
            text += f"üí∞ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> –ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏\n"
        
        text += f"\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{job_data['description'][:200]}..."
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="confirm_job_creation"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_job_creation")
        )
        
        self.bot.send_message(
            message.chat.id,
            text,
            parse_mode='HTML',
            reply_markup=markup
        )
    
    def switch_to_employer(self, message):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è"""
        telegram_id = self.get_or_create_user(message.from_user)
        
        with self.app.app_context():
            user = User.query.filter_by(telegram_id=telegram_id).first()
            user.user_type = 'employer'
            db.session.commit()
        
        self.bot.send_message(
            message.chat.id,
            "üëî –í—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –≤ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç–∫–ª–∏–∫–∏\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º."
        )
    
    def switch_to_jobseeker(self, message):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è"""
        telegram_id = self.get_or_create_user(message.from_user)
        
        with self.app.app_context():
            user = User.query.filter_by(telegram_id=telegram_id).first()
            user.user_type = 'jobseeker'
            db.session.commit()
        
        self.bot.send_message(
            message.chat.id,
            "üíº –í—ã –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –≤ —Ä–µ–∂–∏–º —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ò—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏\n"
            "‚Ä¢ –û—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏\n"
            "‚Ä¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º."
        )
    
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–µ—Ç–æ–¥–æ–≤
    def start_job_search(self, message):
        self.bot.send_message(message.chat.id, "üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def start_subscription_creation(self, message):
        self.bot.send_message(message.chat.id, "üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def show_subscriptions(self, message):
        self.bot.send_message(message.chat.id, "üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def show_profile(self, message):
        self.bot.send_message(message.chat.id, "üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def show_settings(self, message):
        self.bot.send_message(message.chat.id, "üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def show_user_stats(self, message):
        self.bot.send_message(message.chat.id, "üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def handle_job_search_input(self, message, state):
        self.bot.send_message(message.chat.id, "üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def handle_subscription_input(self, message, state):
        self.bot.send_message(message.chat.id, "üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def start_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        self.bot.polling(none_stop=True)
    
    def handle_webhook(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook"""
        if request.headers.get('content-type') == 'application/json':
            json_string = request.get_data().decode('utf-8')
            update = telebot.types.Update.de_json(json_string)
            self.bot.process_new_updates([update])
            return "OK"
        else:
            return "Bad Request", 400

