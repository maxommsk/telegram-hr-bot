version: '3.8'

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine
    container_name: hr_bot_postgres
    environment:
      POSTGRES_DB: telegram_hr_bot
      POSTGRES_USER: hr_bot_user
      POSTGRES_PASSWORD: secure_password_here
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
     # - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - hr_bot_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hr_bot_user -d telegram_hr_bot"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis для кэширования (опционально)
  redis:
    image: redis:7-alpine
    container_name: hr_bot_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hr_bot_network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Telegram HR Bot приложение
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hr_bot_app
    environment:
      # Database
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: telegram_hr_bot
      POSTGRES_USER: hr_bot_user
      POSTGRES_PASSWORD: secure_password_here
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # Flask
      FLASK_ENV: development
      FLASK_DEBUG: "True"
      FLASK_SECRET_KEY: your_super_secret_key_here_change_in_production
      
      # Telegram
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      
      # Notifications
      NOTIFICATION_ENABLED: "true"
      
      # Other
      PORT: 5000
      MAX_CONTENT_LENGTH: 16777216
    ports:
      - "5000:5000"
    volumes:
      - ./src:/app/src:ro
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - hr_bot_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/stats"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (для продакшена)
  nginx:
    image: nginx:alpine
    container_name: hr_bot_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - hr_bot_network
    depends_on:
      - app
    restart: unless-stopped
    profiles:
      - production

  # Мониторинг с Prometheus (опционально)
  prometheus:
    image: prom/prometheus:latest
    container_name: hr_bot_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - hr_bot_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana для визуализации метрик (опционально)
  grafana:
    image: grafana/grafana:latest
    container_name: hr_bot_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - hr_bot_network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  hr_bot_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

